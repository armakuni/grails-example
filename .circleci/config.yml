version: 2.1

# orbs:
#   checkmarx: nukengprod/checkmarx@0.1.0

executors:
  base:
    docker:
    - image: circleci/openjdk:8-jdk
  k6:
    docker:
    - image: loadimpact/k6:0.26.1

jobs:
  compile:
    executor: base
    steps:
    - checkout
    - restore_cache:
        keys:
        - hello-world-{{ checksum "grails-app/conf/BuildConfig.groovy" }}
    - run:
        name: Install Dependencies
        command: ./grailsw refresh-dependencies --non-interactive
    - run:
        name: Compile
        command: ./grailsw compile --non-interactive
    - save_cache:
        key: hello-world-{{ checksum "grails-app/conf/BuildConfig.groovy" }}
        paths:
        - /home/circleci/.m2
    - persist_to_workspace:
        root: /home/circleci
        paths: 
        - .m2
        - .grails
        - project
  
  unit_test:
    executor: base
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci
    - run:
        name: Unit Tests
        command: ./grailsw test-app -unit -coverage -xml --non-interactive
    - store_test_results:
        path: target/test-reports
    - store_artifacts:
        path: target/test-reports/cobertura
        destination: cobertura

  functional_test:
    executor: base
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci
    - run:
        name: Functional Tests
        command: ./grailsw test-app -functional -noreloading -Dconfig.debug=true -Dserver.port=9090 -Dfunctional.environment=anthill --non-interactive
    - store_test_results:
        path: target/test-reports
    # - store_artifacts:
    #     path: target/test-reports/TESTS-TestSuites.xml
    #     destination: TestSuites
  
  performance_test:
    executor: k6
    steps:
    - checkout
    - run:
        name: Functional Tests
        command: k6 run --out json=performance-test-results.json test/performance/performance-config.js
    - store_artifacts:
        path: /home/circleci/project
        destination: performance-test-results.json

  codenarc_analysis:
    executor: base
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci
    - run:
        name: Codenarc
        command: ./grailsw codenarc --non-interactive
    - store_artifacts:
        path: target/CodeNarcReport.html
        destination: codenarc

  checkmarx_analysis:
    executor: base
    steps:
    - checkout
    - run: 
        name: Checkmarx
        command: echo "This step will run the checkmarx Orb when configured"
    # - checkmarx/run-scan:
    #     ABS_FILE_PATH: ABS_FILE_PATHs
    #     PROJECT_NAME: PROJECT_NAME
    #     STUNNEL_PSK: STUNNEL_PSK
    #     WSDL_URL: WSDL_URL
    #     IAM_ROLE: "arn:aws:iam::xxxxxxxxxxxx:role/role-to-assume"

  package:
    executor: base
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci
    - run:
        name: Package
        command: ./grailsw war
    - store_artifacts:
        path: target/war
        destination: war

  deploy:
    executor: base
    parameters:
      environment_name:
        type: string
        description: Name of the environment to deploy into
    steps:
    - checkout
    - attach_workspace:
        at: /home/circleci
    - run:
        name: Deploy to environment
        command: echo "Deploying to << parameters.environment_name >>"

## Workflow filters
master_only: &master_only
  filters:
    branches:
      only: master

workflows:
  version: 2
  capi:
    jobs:
    - compile:
        name: Compile
    - unit_test:
        name: Unit Tests
        requires: 
        - Compile
    - functional_test:
        name: Functional Tests
        requires: 
        - Compile
    - codenarc_analysis:
        name: Codenarc
        requires:
        - Compile
    - checkmarx_analysis: 
        name: Checkmarx
        requires:
        - Compile
    - package: 
        name: Package
        requires:
        - Unit Tests
        - Functional Tests
        - Codenarc
        - Checkmarx
    - deploy:
        <<: *master_only
        name: Deploy SI
        requires:
        - Package
        environment_name: si
    - deploy:
        <<: *master_only
        name: Deploy Staging
        requires:
        - Package
        environment_name: staging
    - deploy:
        <<: *master_only
        name: Deploy UAT
        requires:
        - Package
        environment_name: uat
    - performance_test:
        <<: *master_only
        name: Performance Tests
        requires:
        - Deploy SI
        - Deploy Staging
        - Deploy UAT
    - hold:
        <<: *master_only
        type: approval
        requires:
        - Performance Tests
    - deploy:
        <<: *master_only
        name: Deploy Production
        requires:
        - hold
        environment_name: prod
    